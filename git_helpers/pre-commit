#! /usr/bin/perl
use strict;
use warnings;

# Read current version string
chomp(my $wd = `git rev-parse --show-toplevel`);
my $vFile = "${wd}/VERSION";
open(FH, "<", "$vFile")	or die "Died while opening $vFile for updating";
my @lines = <FH>;
chomp(my $version = $lines[0]);
close(FH);

sub getUpdate {
	# Ask what the update is
	if($_[0] == 1) {
		print "Please type 'major', 'minor', 'patch', or 'pre-release'. Type nothing for pre-release.\n";
	} else {
		print "Please describe the commit:\nMajor - A backwards-incompatible update\nMinor - A new command-line option\nPatch - Any smaller update\nPre-release - commits not on the master branch (DEFAULT)\nSkip - Only if you manually updated the version already, or called git commit --amend\nAbort - Discontinue commit.\n";
	}
	my $input = `exec < /dev/tty && read input && echo \$input`;
	chomp $input;
	$input = uc($input);

	if ($input eq "MAJOR" || $input eq "MINOR" || $input eq "PATCH" || $input eq "PRE-RELEASE" || !$input) {
		# Don't change the version number if no changes made.
		if(not `git diff --staged | grep -E '^(\+|new file)'`) {
			die "You asked to change the version number, but git diff --staged does not show any changes. Aborted.\n";
		}
	} elsif ($input eq "ABORT") {
		die;
	}

	# Calculate the new version
	my @semver_prerelease = split /-/, $_[1], 2; # first split by hyphen
	# then split first part by period
	my @semVs = split /\./, $semver_prerelease[0], 3;
	# split second part by plus
	my @branch_commit;
	if(scalar @semver_prerelease == 2) {
		@branch_commit = split /\+/, $semver_prerelease[1], 2;
		if (scalar @branch_commit == 1) {
			push @branch_commit, 0; # the initial nbr of commits
		}
	} else {
		@branch_commit = ("", 0); # master branch has no prerelease
	}

	if ($input eq "MAJOR") {
		print "Incrementing major version...\n";
		$semVs[0] = $semVs[0] + 1;
		$semVs[1] = 0;
		$semVs[2] = 0;
		$branch_commit[0] = "";
		$branch_commit[1] = 0;
	} elsif ($input eq "MINOR") {
		print "Incrementing minor version...\n";
		$semVs[1] = $semVs[1] + 1;
		$semVs[2] = 0;
		$branch_commit[0] = "";
		$branch_commit[1] = 0;
	} elsif ($input eq "PATCH") {
		print "Incrementing patch version...\n";
		$semVs[2] = $semVs[2] + 1;
		$branch_commit[0] = "";
		$branch_commit[1] = 0;
	} elsif ($input eq "PRE-RELEASE" || !$input) {
		# get the name of the checked out branch
		chomp($branch_commit[0] = `git branch | grep \\* | cut -d ' ' -f2`);
		my @parts = split '/', $branch_commit[0], 2; # remove the first part if present
		if ( $parts[1] ) {
			$branch_commit[0] = $parts[1];
		} else {
			$branch_commit[0] = $parts[0];
		}
		
		if ($branch_commit[0] eq "master") {
			die "Please do not make pre-release commits on master.";
		}
		print "Incrementing pre-release version...\n";
		$branch_commit[1]++;
	} elsif ($input eq "SKIP") {
		print "Doing nothing...\n";
	} else {
		# Input was incorrect, so prompt again
		return 0;
	}

	# Calculate the new version string
	my $newVersion = join '.', @semVs;
	if ($branch_commit[0]) {
		$newVersion = "$newVersion-$branch_commit[0]";
		if ($branch_commit[1]) {
			$newVersion = "$newVersion+$branch_commit[1]";
		}
	}

	# Write to file if changed
	print "This commit's version is ${newVersion}\n";

	if(not $newVersion eq $_[1]) {
		open(FH, "+<", "$_[2]")	or die "Died while opening VERSION for updating";
		my @lines = <FH>;
		$lines[0] = "${newVersion}\n";
		seek(FH, 0, 0)			or die "Died while seeking in VERSION";
		print FH @lines 		or die "Died while printing in VERSION";
		truncate(FH, tell(FH)) 	or die "Died while truncating VERSION";
		close(FH);
	}
	
	return 1;
}

my $updated = getUpdate(0, $version, $vFile);
while(! $updated) {
	$updated = getUpdate(1, $version, $vFile);
}

system('git add -A');
print "Ready for commit\n";
